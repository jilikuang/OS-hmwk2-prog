===============================================================================
               PART 4 ANSWERS (TEAM 30) jh3478, by2223, jk3735
===============================================================================
4-a
===============================================================================
Run your test program several times. Which fields in the prinfo structure 
change? Which ones do not? Discuss why different fields might change with 
different frequency.

[ANSWER]
Our output format is: 
	- name of program executed, 
	- process id, 
	- current state of process, 
	- process id of parent, 
	- pid of youngest child, 
	- pid of older sibling, 
	- user id of process owner. 

Test Run Results:
[1] adbd,62,1,1,1019,61,0
	sh,1019,1,62,1025,0,0
		prinfo,1025,0,1019,0,0,0

[2] adbd,62,1,1,1019,61,0
        sh,1019,1,62,1028,0,0
                prinfo,1028,0,1019,0,0,0

[3] adbd,62,1,1,1019,61,0
	sh,1019,1,62,1030,0,0
		prinfo,1030,0,1019,0,0,0

we ran our program three times, and the only field changed is the pid of 
youngest child of the sh process, and the process id of the prinfo process. 
This is because sh is the parent of prinfo, and when we re-run the prinfo,  
prinfo will gain a new pid. 

All other output remains the same, since no other process is started on 
the system during the time of testing - owner of the process did not change, 
parent process did not die, and name of the process did not change, 

Different fields might change with different frequency, since current processes 
on the system have different pids and states from time to time. Also, processes 
would gone away and forked or re-parented with different frequency.

===============================================================================
4-b
===============================================================================
Start the mobile web browser in the emulator, and re-run your test program. 
How many processes are started? What is/are the parent process(es) of the new 
process(es)? Close the browser (press the "Home" button). How many processes 
were destroyed? Discuss your findings.

[ANSWER]
The following task is the task started after opening the browser, and only one 
processes is started. 

	android.browser,1041,1,53,0,975,10014

The parent of the process is:
	
	zygote,53,1,1,1041,52,0

After closing the browser, nothing is gone, the browser process remains. 

We have observed that one process named 'android.browser' started after opening 
the browser, and it's a child process of the 'zygote' process. After close the 
browser (by home button or back button), no process is gone. This is probably 
because using home button or back button does not immediately terminate 
process, and the process still runs in the background. 

===============================================================================
4-c
===============================================================================
Notice that on the Android platform there is a process named zygote. 
Investigate this process and any children processes:

i. What is the purpose of this process?
---
[ANSWER]
In Android OS, zygote serves as a initial system service process, which starts 
up at init (specified in the init.rc file), and is the parent of all application 
process. Zygote allows use of existing read only and shared core libraries 
without duplication. All of the core libraries exist in a single place since 
they are read only. When an application process starts, a message is sent to 
the zygote process and a fork call is triggered. Thus, the application start-up
is accelerated by reducing time copying the shared libs (read-only). [1] [2]

ii. Where is the zygote binary? If you can't find it, how might you explain 
its presence in your list of processes?
---
[ANSWER]
There is no zygote binary. We found the zygote process binary is:
/system/bin/app_process by investigating the /proc structure. Although there is 
no binary named zygote. The zygote process binary is created at init (specified
in the init.rc), and copies shared core libraries.

iii. Discuss some reasons why an embedded system might choose to use a process 
like the zygote.
HINT: A key feature of embedded systems is their resource limitations.
---
[ANSWER]
Embedded systems have only very limited resources, and such a mechanism can 
help to resolve this problem well. In terms of coping all necessary libraries 
for every application process starting on the system, processes can be forked 
from zygote and share core libraries without duplication. And since an embedded 
system application rarely modifies its core libraries, the application starting 
up is faster and scarce resources are thus saved. In this fashion, embedded 
systems can run more applications with only limited resources, and achieve 
better functionalities.

References:
[1] http://coltf.blogspot.com/p/android-os-processes-and-zygote.html 
[2] http://anatomyofandroid.com/2013/10/15/zygote/
